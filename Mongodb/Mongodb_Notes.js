// To show  All Databases
//Show databases
//show dbs
//we make new database that is non-existence//
// use Allenhouse25_DB
//To create new collections //
//db.createCollection("Students_Data")
//output is { ok: 1 }
//db refers in mongodb is a built-in global object in the mongo shell and db refers to currently selected database.

//Insert new document
db.Students_Data.insertone({
    StuName:"Pragati",
    StuAge:20,
    StuEmail:'pragatigupta168@gmail.com',
    StuSGPA:8.5
})

//select data from collection
db.Students_Data.find()

//To Insert more than one document(we use array)
db.Students_Data.insertMany([
    {
        StuName:"Sachin",
        StuAge:21,
        StuEmail:'sachin198@gmail.com',
        StuSGPA:8.1,
        StuStream:"AI/ML",
        StuGender:"Male",
        StuLang:["C","C++","Java"]
    }
    ,
    {
        StuName:"Amit",
        StuAge:22,
        StuEmail:'singhamit188@gmail.com',
        StuSGPA:9.1,
        StuStream:"AI/ML",
        StuGender:"Male",
        StuLang:["C","Python","Java"]
    }
    ,
    {
        StuName:"Lakshya",
        StuAge:20,
        StuEmail:'lakshya122@gmail.com',
        StuSGPA:8.7,
        StuStream:"AI/ML",
        StuGender:"Male",
        StuLang:["C"],
        StuLocAdd:{
            HouseNo:302,
            City:"Kanpur",
            PinCode:208011
        }
    }
])

//Get total no of document
//db.Students_Data.find().count()

//projection specifies the field to return in the documents that match the selection criteria
//To return all fields in matching documents,remove this parameter.It is of the document .

db.Students_Data.find({},{StuName: 1, StuEmail: 1})

db.Students_Data.find({},{StuName: 1, StuLocAdd: 1})//here 1 means inclusion mtlb include karo

db.Students_Data.find({},{StuAge:0, StuLocADD:0})//here 0 means exclusion mtlb exclude karo

db.Students_Data.find({},{StuName:2, StuEmail:3})

//db.Students_Data.find({},{StuName: 1, StuEmail: 1, StuAge:0})
//MongoServerError[Location31254]: Cannot do exclusion on field StuAge in inclusion projection because StuAge is meaningless.

db.Students_Data.find({},{StuName: 1, StuEmail: 1, _id:0})
//_id:0 apne aap mei object id hai which serves as the primary key for the document in MongoDB.
//How id is generated in MongoDB?   
//The _id field is a unique identifier for each document in a MongoDB collection.
//It is 12-byte unique identifier that is automatically generated by MongoDB when a document is inserted into a collection.
//4 bytes for timestamp, 5 bytes for a random value, and 3 bytes for an incrementing counter.
//5 bytes for a random value, and 3 bytes for an incrementing counter.
//3 bytes for an incrementing counter.

db.Students_Data.find({},{StuLocAdd:1})

db.Students_Data.find({},{StuLocAdd:1})

db.Students_Data.find({},{'StuLocAdd.HouseNo':1, 'StuLocAdd.City':1})

//Day 2
//To insert a document with an array field
//We can insert a document with an array field in MongoDB, which allows us to store multiple values in a single field.
//For example, we can insert a document with a field called "hobbies" that contains an array of strings representing the hobbies of a person.

db.Children_Data.insertOne({
    _id: 1,
    name: "Pragati",
    hobbies: ["Reading", "Traveling"],
    scores:[78, 85, 90],
    items: [
        { item: "Book", price: 10 },
        { item: "Pen", price: 2 }
    ],      
})

//Selection
db.Students_Data.find({
    StuName:{ $eq: "Amit" // $eq is used to match the value of StuName with "Amit"
        }
})

db.Students_Data.find({
    StuSGPA:{ $gte: 8.5 }// $gte is used to match the value of StuSGPA that is greater than 8.5
})

db.Students_Data.find({
    StuLang: { $in: ["C", "Python"] } // $in is used to match the value of StuLang that is in the array ["C", "Python"]
})

db.Students_Data.find({
    StuAge: { $ne: 20 } // $ne is used to match the value of StuAge that is not equal to 20
})

db.Students_Data.find({
    StuLocAdd: { $lt: true } // $lt is used to match the value of StuLocAdd that is less than true
})

//There are many operators in MongoDB that can be used to compare  and refernce document fields.
//Comparison: The following operators can be used in queries to compare values in documents:
//$eq: Matches values that are equal to a specified value.
//$ne: Matches values that are not equal to a specified value.  
//$gt: Matches values that are greater than a specified value.
//$gte: Matches values that are greater than or equal to a specified value.
//$lt: Matches values that are less than a specified value.
//$lte: Matches values that are less than or equal to a specified value.
//$in: Matches values that are in a specified array.

//Logical Operators: The following operators can be used to combine multiple conditions in a query:
//$and:Returns document where both queries match.
//$or:Returns documents where either query matches.
//$not: Returns documents where the query does not match.

//$exists: Returns documents where a specified field exists or does not exist.
//$type: Returns documents where a specified field is of a specified type.

db.Students_Data.find({
    $and: [
        { StuAge: { $eq: 20 } }, 
        { StuSGPA: { $gte: 9.0 } }
    ]       
})

db.Students_Data.find({
    $and: [
        { StuName: { $eq: "Amit" } }, 
        { StuSGPA: { $gte: 7.0 } }
    ]       
})

db.Students_Data.find({
    $or: [
        { StuName: { $eq: "Amit" } }, 
        { StuSGPA: { $gte: 9.0 } }
    ]       
})

db.Students_Data.find({
    $and: [
        { StuName: { $eq: "Amit" } }, 
        { StuSGPA:{$not: { $gte: 7.0 }} }
    ]       
})

db.Students_Data.find({
    StuLocAdd: { $exists: true }
})

db.Students_Data.find({
    StuGender: { $type: "string" } 
})

db.Students_Data.find({
    StuGender: { $type: 2 } 
})

db.Students_Data.find({
    StuName: { $exists: true },
    StuName: { $type: "string" },
    StuName: { $gte: "A" } 
})
//There are my operator of $type in MongoDB that can be used to check the type of a field in a document.
//For example, we can use $type to check if a field is of type string=2, double=1, int=16, long=18, 
//decimal=19, array=4, object=3, boolean=8, date=9, null=10, regex=11, and binary data=5.

db.Students_Data.find({
    StuName: { $exists: true, $type: "string", $gte: "A" }
})

db.Students_Data.find({
    $and:[{StuAge:{$exists:true}}, {StuName:{$type:"string"}}, {StuName:{$eq:"Amit"}}]
})

//It is implicit-and that can be used to combine multiple conditions in a query.

//Now we will learn about the Date object in MongoDB.
db.DatesDemo.insertMany([
    {
        _id: 1001,
        info:'Date by using Date()',
        DOJ:Date()
    }
])

db.DatesDemo.insertMany([
    {
        _id: 1002,
        info:'Date by using new Date()',
        DOJ: new Date()
    }
])

db.DatesDemo.insertMany([
    {
        _id: 1003,
        info:'Date by using ISODate()',
        DOJ: ISODate()
    }
])

db.DatesDemo.find({
    DOJ:{$type:"date"}
})


//Mongodb create a new Date object in two ways:
//1. By using the new Date() constructor, which returns a date and time as date object.
//2. By using the ISODate() function, which returns a date and time as date object.
//3. By using the Date() function, which returns a date and time as String object.
//By using UTC(coordinated universal time) time, which is the standard time used in MongoDB.
//If Z is added at the end of the date string, it indicates that the date is in UTC time.
//If Z is not added at the end of the date string, it indicates that the date is in local time.


db.DatesDemo.insertMany([
    {
        _id: 1004,
        info:'Date by using new Date()',
        DOB:  new Date('2005-01-01')
    }
])

//$dateToString is used to convert a date to a string according to a user-specified format.
//{$dateToString: { 
// date:<date expression>,
// format:<format expression>,
// timezone:<tz expression>,}}

//Error Allenhouse25_A_DB.DatesDemo :: caused by :: can't convert from BSON type string to Date.

db.DatesDemo.find({DOJ:{$type:'date'}},{
    Date_of_Joining: {
        $dateToString: {
            date: "$DOJ",
            format: "%Y-%m-%d %H:%M:%S",
            timezone: "Asia/Kolkata"
        } 
}
})

db.Students_Data.updateOne(
    { StuName: {$eq:"Lakshya"} }, 
    { $set: { StuSGPA: 8.0 } }
)


db.Students_Data.updateOne(
    { StuName: {$eq:"Lakshya"} }, 
    { $set: { StuSGPA: 8.0, StuStream:'EC' } }
)

db.Students_Data.updateOne(
    {StuName:{$in:['Lakshya','Amit','Pragati','Sachin']}},
    { $set: { StuSGPA: 8.0, StuStream:'EC' }
}
)

db.Students_Data.updateOne(
    {StuName:{$in:['Lakshya','Amit','Pragati','Sachin']}},
    { $set: { StuSGPA: 8.0, StuStream:'EC' }
},{ upsert: true } //upsert is used to insert a new document if no document matches the query then 
)

//$set is used to sets a value of a field
//$rename is used to rename a field
//$unset is used to remove a field

db.Students_Data.updateOne(
    { StuName: {$eq:"Siddhi"} }, 
    { $rename: { StuSGPA: "StuCGPA" } } //This will rename the StuSGPA field to StuCGPA in the document where StuName is "Lakshya"
)

db.Students_Data.updateOne({
    StuName: {$eq:"Siddhi"}},
    {$set: { StuStream: "CSE", StuAge:15, StuGender:'Female' } 
})

db.Students_Data.updateOne({
    StuName: {$eq:"Siddhi"}},
    {$set: { StuStream: "CSE", StuAge:1, StuGender:'Java' }},
    {$rename:{StuGender:"StuLang"}
})

db.Students_Data.deleteOne({
    StuName: {$eq:"Siddhi"}})

db.Students_Data.updateMany({StuName:{$in:['Amit','Lakshya']}},
    {$set:{'aboutUs':"This is a test document for updateMany operation."}}
)

db.Students_Data.find({aboutUs:{$eq:"This is a test document for updateMany operation."}})

db.Students_Data.find({aboutUs:/document/})

db.Students_Data.find({StuName:/mit/})//case sensitive search

db.Students_Data.find({StuName:/Mit/})//case insensitive search

db.Students_Data.find({StuName:/mit/i})// case insensitive search

db.Students_Data.find({StuName:/^A/i})//for first letter of name

db.Students_Data.find({StuName:/ya$/i})//for last letter of name

db.Students_Data.find({StuName:/^s$/i})

db.Students_Data.find({StuName:/.{1}a$/i})//for second character of name

db.Students_Data.find({StuName:/.{2}a$/i})//for third character of name

db.Students_Data.find({StuName:/a.{1}a$/i})//for 2nd last character of name

//Mongodb array find operations 
//There are many array find operations in MongoDB that can be used to query documents that contain arrays.

db.Students_Data.updateOne({StuName:"Amit"},{$push:{StuLang:"C++"}})
//push is used to add a new element to an array field in a document.

db.Students_Data.updateOne({StuName:"Amit"},{$addToSet:{StuLang:"C++"}})
//$addToSet is used for not adding a duplicate element to an array field in a document.

// To show  All Databases
//Show databases
//show dbs
//we make new database that is non-existence//
// use Allenhouse25_DB
//To create new collections //
//db.createCollection("Students_Data")
//output is { ok: 1 }
//db refers in mongodb is a built-in global object in the mongo shell and db refers to currently selected database.

//Insert new document
db.Students_Data.insertone({
    StuName:"Pragati",
    StuAge:20,
    StuEmail:'pragatigupta168@gmail.com',
    StuSGPA:8.5
})

//select data from collection
db.Students_Data.find()

//To Insert more than one document(we use array)
db.Students_Data.insertMany([
    {
        StuName:"Sachin",
        StuAge:21,
        StuEmail:'sachin198@gmail.com',
        StuSGPA:8.1,
        StuStream:"AI/ML",
        StuGender:"Male",
        StuLang:["C","C++","Java"]
    }
    ,
    {
        StuName:"Amit",
        StuAge:22,
        StuEmail:'singhamit188@gmail.com',
        StuSGPA:9.1,
        StuStream:"AI/ML",
        StuGender:"Male",
        StuLang:["C","Python","Java"]
    }
    ,
    {
        StuName:"Lakshya",
        StuAge:20,
        StuEmail:'lakshya122@gmail.com',
        StuSGPA:8.7,
        StuStream:"AI/ML",
        StuGender:"Male",
        StuLang:["C"],
        StuLocAdd:{
            HouseNo:302,
            City:"Kanpur",
            PinCode:208011
        }
    }
])

//Get total no of document
//db.Students_Data.find().count()

//projection specifies the field to return in the documents that match the selection criteria
//To return all fields in matching documents,remove this parameter.It is of the document .

db.Students_Data.find({},{StuName: 1, StuEmail: 1})

db.Students_Data.find({},{StuName: 1, StuLocAdd: 1})//here 1 means inclusion mtlb include karo

db.Students_Data.find({},{StuAge:0, StuLocADD:0})//here 0 means exclusion mtlb exclude karo

db.Students_Data.find({},{StuName:2, StuEmail:3})

//db.Students_Data.find({},{StuName: 1, StuEmail: 1, StuAge:0})
//MongoServerError[Location31254]: Cannot do exclusion on field StuAge in inclusion projection because StuAge is meaningless.

db.Students_Data.find({},{StuName: 1, StuEmail: 1, _id:0})
//_id:0 apne aap mei object id hai which serves as the primary key for the document in MongoDB.
//How id is generated in MongoDB?   
//The _id field is a unique identifier for each document in a MongoDB collection.
//It is 12-byte unique identifier that is automatically generated by MongoDB when a document is inserted into a collection.
//4 bytes for timestamp, 5 bytes for a random value, and 3 bytes for an incrementing counter.
//5 bytes for a random value, and 3 bytes for an incrementing counter.
//3 bytes for an incrementing counter.

db.Students_Data.find({},{StuLocAdd:1})

db.Students_Data.find({},{StuLocAdd:1})

db.Students_Data.find({},{'StuLocAdd.HouseNo':1, 'StuLocAdd.City':1})

//Day 2
//To insert a document with an array field
//We can insert a document with an array field in MongoDB, which allows us to store multiple values in a single field.
//For example, we can insert a document with a field called "hobbies" that contains an array of strings representing the hobbies of a person.

db.Children_Data.insertOne({
    _id: 1,
    name: "Pragati",
    hobbies: ["Reading", "Traveling"],
    scores:[78, 85, 90],
    items: [
        { item: "Book", price: 10 },
        { item: "Pen", price: 2 }
    ],      
})

//Selection
db.Students_Data.find({
    StuName:{ $eq: "Amit" // $eq is used to match the value of StuName with "Amit"
        }
})

db.Students_Data.find({
    StuSGPA:{ $gte: 8.5 }// $gte is used to match the value of StuSGPA that is greater than 8.5
})

db.Students_Data.find({
    StuLang: { $in: ["C", "Python"] } // $in is used to match the value of StuLang that is in the array ["C", "Python"]
})

db.Students_Data.find({
    StuAge: { $ne: 20 } // $ne is used to match the value of StuAge that is not equal to 20
})

db.Students_Data.find({
    StuLocAdd: { $lt: true } // $lt is used to match the value of StuLocAdd that is less than true
})

//There are many operators in MongoDB that can be used to compare  and refernce document fields.
//Comparison: The following operators can be used in queries to compare values in documents:
//$eq: Matches values that are equal to a specified value.
//$ne: Matches values that are not equal to a specified value.  
//$gt: Matches values that are greater than a specified value.
//$gte: Matches values that are greater than or equal to a specified value.
//$lt: Matches values that are less than a specified value.
//$lte: Matches values that are less than or equal to a specified value.
//$in: Matches values that are in a specified array.

//Logical Operators: The following operators can be used to combine multiple conditions in a query:
//$and:Returns document where both queries match.
//$or:Returns documents where either query matches.
//$not: Returns documents where the query does not match.

//$exists: Returns documents where a specified field exists or does not exist.
//$type: Returns documents where a specified field is of a specified type.

db.Students_Data.find({
    $and: [
        { StuAge: { $eq: 20 } }, 
        { StuSGPA: { $gte: 9.0 } }
    ]       
})

db.Students_Data.find({
    $and: [
        { StuName: { $eq: "Amit" } }, 
        { StuSGPA: { $gte: 7.0 } }
    ]       
})

db.Students_Data.find({
    $or: [
        { StuName: { $eq: "Amit" } }, 
        { StuSGPA: { $gte: 9.0 } }
    ]       
})

db.Students_Data.find({
    $and: [
        { StuName: { $eq: "Amit" } }, 
        { StuSGPA:{$not: { $gte: 7.0 }} }
    ]       
})

db.Students_Data.find({
    StuLocAdd: { $exists: true }
})

db.Students_Data.find({
    StuGender: { $type: "string" } 
})

db.Students_Data.find({
    StuGender: { $type: 2 } 
})

db.Students_Data.find({
    StuName: { $exists: true },
    StuName: { $type: "string" },
    StuName: { $gte: "A" } 
})
//There are my operator of $type in MongoDB that can be used to check the type of a field in a document.
//For example, we can use $type to check if a field is of type string=2, double=1, int=16, long=18, 
//decimal=19, array=4, object=3, boolean=8, date=9, null=10, regex=11, and binary data=5.

db.Students_Data.find({
    StuName: { $exists: true, $type: "string", $gte: "A" }
})

db.Students_Data.find({
    $and:[{StuAge:{$exists:true}}, {StuName:{$type:"string"}}, {StuName:{$eq:"Amit"}}]
})

//It is implicit-and that can be used to combine multiple conditions in a query.

//Now we will learn about the Date object in MongoDB.
db.DatesDemo.insertMany([
    {
        _id: 1001,
        info:'Date by using Date()',
        DOJ:Date()
    }
])

db.DatesDemo.insertMany([
    {
        _id: 1002,
        info:'Date by using new Date()',
        DOJ: new Date()
    }
])

db.DatesDemo.insertMany([
    {
        _id: 1003,
        info:'Date by using ISODate()',
        DOJ: ISODate()
    }
])

db.DatesDemo.find({
    DOJ:{$type:"date"}
})


//Mongodb create a new Date object in two ways:
//1. By using the new Date() constructor, which returns a date and time as date object.
//2. By using the ISODate() function, which returns a date and time as date object.
//3. By using the Date() function, which returns a date and time as String object.
//By using UTC(coordinated universal time) time, which is the standard time used in MongoDB.
//If Z is added at the end of the date string, it indicates that the date is in UTC time.
//If Z is not added at the end of the date string, it indicates that the date is in local time.


db.DatesDemo.insertMany([
    {
        _id: 1004,
        info:'Date by using new Date()',
        DOB:  new Date('2005-01-01')
    }
])

//$dateToString is used to convert a date to a string according to a user-specified format.
//{$dateToString: { 
// date:<date expression>,
// format:<format expression>,
// timezone:<tz expression>,}}

//Error Allenhouse25_A_DB.DatesDemo :: caused by :: can't convert from BSON type string to Date.

db.DatesDemo.find({DOJ:{$type:'date'}},{
    Date_of_Joining: {
        $dateToString: {
            date: "$DOJ",
            format: "%Y-%m-%d %H:%M:%S",
            timezone: "Asia/Kolkata"
        } 
}
})

db.Students_Data.updateOne(
    { StuName: {$eq:"Lakshya"} }, 
    { $set: { StuSGPA: 8.0 } }
)


db.Students_Data.updateOne(
    { StuName: {$eq:"Lakshya"} }, 
    { $set: { StuSGPA: 8.0, StuStream:'EC' } }
)

db.Students_Data.updateOne(
    {StuName:{$in:['Lakshya','Amit','Pragati','Sachin']}},
    { $set: { StuSGPA: 8.0, StuStream:'EC' }
}
)

db.Students_Data.updateOne(
    {StuName:{$in:['Lakshya','Amit','Pragati','Sachin']}},
    { $set: { StuSGPA: 8.0, StuStream:'EC' }
},{ upsert: true } //upsert is used to insert a new document if no document matches the query then 
)

//$set is used to sets a value of a field
//$rename is used to rename a field
//$unset is used to remove a field

db.Students_Data.updateOne(
    { StuName: {$eq:"Siddhi"} }, 
    { $rename: { StuSGPA: "StuCGPA" } } //This will rename the StuSGPA field to StuCGPA in the document where StuName is "Lakshya"
)

db.Students_Data.updateOne({
    StuName: {$eq:"Siddhi"}},
    {$set: { StuStream: "CSE", StuAge:15, StuGender:'Female' } 
})

db.Students_Data.updateOne({
    StuName: {$eq:"Siddhi"}},
    {$set: { StuStream: "CSE", StuAge:1, StuGender:'Java' }},
    {$rename:{StuGender:"StuLang"}
})

db.Students_Data.deleteOne({
    StuName: {$eq:"Siddhi"}})

db.Students_Data.updateMany({StuName:{$in:['Amit','Lakshya']}},
    {$set:{'aboutUs':"This is a test document for updateMany operation."}}
)

db.Students_Data.find({aboutUs:{$eq:"This is a test document for updateMany operation."}})

db.Students_Data.find({aboutUs:/document/})

db.Students_Data.find({StuName:/mit/})//case sensitive search

db.Students_Data.find({StuName:/Mit/})//case insensitive search

db.Students_Data.find({StuName:/mit/i})// case insensitive search

db.Students_Data.find({StuName:/^A/i})//for first letter of name

db.Students_Data.find({StuName:/ya$/i})//for last letter of name

db.Students_Data.find({StuName:/^s$/i})

db.Students_Data.find({StuName:/.{1}a$/i})//for second character of name

db.Students_Data.find({StuName:/.{2}a$/i})//for third character of name

db.Students_Data.find({StuName:/a.{1}a$/i})//for 2nd last character of name

//Mongodb array find operations 
//There are many array find operations in MongoDB that can be used to query documents that contain arrays.

db.Students_Data.updateOne({StuName:"Amit"},{$push:{StuLang:"C++"}})
//push is used to add a new element to an array field in a document.

db.Students_Data.updateOne({StuName:"Amit"},{$addToSet:{StuLang:"C++"}})
//$addToSet is used for not adding a duplicate element to an array field in a document.

// To show  All Databases
//Show databases
//show dbs
//we make new database that is non-existence//
// use Allenhouse25_DB
//To create new collections //
//db.createCollection("Students_Data")
//output is { ok: 1 }
//db refers in mongodb is a built-in global object in the mongo shell and db refers to currently selected database.

//Insert new document
db.Students_Data.insertone({
    StuName:"Pragati",
    StuAge:20,
    StuEmail:'pragatigupta168@gmail.com',
    StuSGPA:8.5
})

//select data from collection
db.Students_Data.find()

//To Insert more than one document(we use array)
db.Students_Data.insertMany([
    {
        StuName:"Sachin",
        StuAge:21,
        StuEmail:'sachin198@gmail.com',
        StuSGPA:8.1,
        StuStream:"AI/ML",
        StuGender:"Male",
        StuLang:["C","C++","Java"]
    }
    ,
    {
        StuName:"Amit",
        StuAge:22,
        StuEmail:'singhamit188@gmail.com',
        StuSGPA:9.1,
        StuStream:"AI/ML",
        StuGender:"Male",
        StuLang:["C","Python","Java"]
    }
    ,
    {
        StuName:"Lakshya",
        StuAge:20,
        StuEmail:'lakshya122@gmail.com',
        StuSGPA:8.7,
        StuStream:"AI/ML",
        StuGender:"Male",
        StuLang:["C"],
        StuLocAdd:{
            HouseNo:302,
            City:"Kanpur",
            PinCode:208011
        }
    }
])

//Get total no of document
//db.Students_Data.find().count()

//projection specifies the field to return in the documents that match the selection criteria
//To return all fields in matching documents,remove this parameter.It is of the document .

db.Students_Data.find({},{StuName: 1, StuEmail: 1})

db.Students_Data.find({},{StuName: 1, StuLocAdd: 1})//here 1 means inclusion mtlb include karo

db.Students_Data.find({},{StuAge:0, StuLocADD:0})//here 0 means exclusion mtlb exclude karo

db.Students_Data.find({},{StuName:2, StuEmail:3})

//db.Students_Data.find({},{StuName: 1, StuEmail: 1, StuAge:0})
//MongoServerError[Location31254]: Cannot do exclusion on field StuAge in inclusion projection because StuAge is meaningless.

db.Students_Data.find({},{StuName: 1, StuEmail: 1, _id:0})
//_id:0 apne aap mei object id hai which serves as the primary key for the document in MongoDB.
//How id is generated in MongoDB?   
//The _id field is a unique identifier for each document in a MongoDB collection.
//It is 12-byte unique identifier that is automatically generated by MongoDB when a document is inserted into a collection.
//4 bytes for timestamp, 5 bytes for a random value, and 3 bytes for an incrementing counter.
//5 bytes for a random value, and 3 bytes for an incrementing counter.
//3 bytes for an incrementing counter.

db.Students_Data.find({},{StuLocAdd:1})

db.Students_Data.find({},{StuLocAdd:1})

db.Students_Data.find({},{'StuLocAdd.HouseNo':1, 'StuLocAdd.City':1})

//Day 2
//To insert a document with an array field
//We can insert a document with an array field in MongoDB, which allows us to store multiple values in a single field.
//For example, we can insert a document with a field called "hobbies" that contains an array of strings representing the hobbies of a person.

db.Children_Data.insertOne({
    _id: 1,
    name: "Pragati",
    hobbies: ["Reading", "Traveling"],
    scores:[78, 85, 90],
    items: [
        { item: "Book", price: 10 },
        { item: "Pen", price: 2 }
    ],      
})

//Selection
db.Students_Data.find({
    StuName:{ $eq: "Amit" // $eq is used to match the value of StuName with "Amit"
        }
})

db.Students_Data.find({
    StuSGPA:{ $gte: 8.5 }// $gte is used to match the value of StuSGPA that is greater than 8.5
})

db.Students_Data.find({
    StuLang: { $in: ["C", "Python"] } // $in is used to match the value of StuLang that is in the array ["C", "Python"]
})

db.Students_Data.find({
    StuAge: { $ne: 20 } // $ne is used to match the value of StuAge that is not equal to 20
})

db.Students_Data.find({
    StuLocAdd: { $lt: true } // $lt is used to match the value of StuLocAdd that is less than true
})

//There are many operators in MongoDB that can be used to compare  and refernce document fields.
//Comparison: The following operators can be used in queries to compare values in documents:
//$eq: Matches values that are equal to a specified value.
//$ne: Matches values that are not equal to a specified value.  
//$gt: Matches values that are greater than a specified value.
//$gte: Matches values that are greater than or equal to a specified value.
//$lt: Matches values that are less than a specified value.
//$lte: Matches values that are less than or equal to a specified value.
//$in: Matches values that are in a specified array.

//Logical Operators: The following operators can be used to combine multiple conditions in a query:
//$and:Returns document where both queries match.
//$or:Returns documents where either query matches.
//$not: Returns documents where the query does not match.

//$exists: Returns documents where a specified field exists or does not exist.
//$type: Returns documents where a specified field is of a specified type.

db.Students_Data.find({
    $and: [
        { StuAge: { $eq: 20 } }, 
        { StuSGPA: { $gte: 9.0 } }
    ]       
})

db.Students_Data.find({
    $and: [
        { StuName: { $eq: "Amit" } }, 
        { StuSGPA: { $gte: 7.0 } }
    ]       
})

db.Students_Data.find({
    $or: [
        { StuName: { $eq: "Amit" } }, 
        { StuSGPA: { $gte: 9.0 } }
    ]       
})

db.Students_Data.find({
    $and: [
        { StuName: { $eq: "Amit" } }, 
        { StuSGPA:{$not: { $gte: 7.0 }} }
    ]       
})

db.Students_Data.find({
    StuLocAdd: { $exists: true }
})

db.Students_Data.find({
    StuGender: { $type: "string" } 
})

db.Students_Data.find({
    StuGender: { $type: 2 } 
})

db.Students_Data.find({
    StuName: { $exists: true },
    StuName: { $type: "string" },
    StuName: { $gte: "A" } 
})
//There are my operator of $type in MongoDB that can be used to check the type of a field in a document.
//For example, we can use $type to check if a field is of type string=2, double=1, int=16, long=18, 
//decimal=19, array=4, object=3, boolean=8, date=9, null=10, regex=11, and binary data=5.

db.Students_Data.find({
    StuName: { $exists: true, $type: "string", $gte: "A" }
})

db.Students_Data.find({
    $and:[{StuAge:{$exists:true}}, {StuName:{$type:"string"}}, {StuName:{$eq:"Amit"}}]
})

//It is implicit-and that can be used to combine multiple conditions in a query.

//Now we will learn about the Date object in MongoDB.
db.DatesDemo.insertMany([
    {
        _id: 1001,
        info:'Date by using Date()',
        DOJ:Date()
    }
])

db.DatesDemo.insertMany([
    {
        _id: 1002,
        info:'Date by using new Date()',
        DOJ: new Date()
    }
])

db.DatesDemo.insertMany([
    {
        _id: 1003,
        info:'Date by using ISODate()',
        DOJ: ISODate()
    }
])

db.DatesDemo.find({
    DOJ:{$type:"date"}
})


//Mongodb create a new Date object in two ways:
//1. By using the new Date() constructor, which returns a date and time as date object.
//2. By using the ISODate() function, which returns a date and time as date object.
//3. By using the Date() function, which returns a date and time as String object.
//By using UTC(coordinated universal time) time, which is the standard time used in MongoDB.
//If Z is added at the end of the date string, it indicates that the date is in UTC time.
//If Z is not added at the end of the date string, it indicates that the date is in local time.


db.DatesDemo.insertMany([
    {
        _id: 1004,
        info:'Date by using new Date()',
        DOB:  new Date('2005-01-01')
    }
])

//$dateToString is used to convert a date to a string according to a user-specified format.
//{$dateToString: { 
// date:<date expression>,
// format:<format expression>,
// timezone:<tz expression>,}}

//Error Allenhouse25_A_DB.DatesDemo :: caused by :: can't convert from BSON type string to Date.

db.DatesDemo.find({DOJ:{$type:'date'}},{
    Date_of_Joining: {
        $dateToString: {
            date: "$DOJ",
            format: "%Y-%m-%d %H:%M:%S",
            timezone: "Asia/Kolkata"
        } 
}
})

db.Students_Data.updateOne(
    { StuName: {$eq:"Lakshya"} }, 
    { $set: { StuSGPA: 8.0 } }
)


db.Students_Data.updateOne(
    { StuName: {$eq:"Lakshya"} }, 
    { $set: { StuSGPA: 8.0, StuStream:'EC' } }
)

db.Students_Data.updateOne(
    {StuName:{$in:['Lakshya','Amit','Pragati','Sachin']}},
    { $set: { StuSGPA: 8.0, StuStream:'EC' }
}
)

db.Students_Data.updateOne(
    {StuName:{$in:['Lakshya','Amit','Pragati','Sachin']}},
    { $set: { StuSGPA: 8.0, StuStream:'EC' }
},{ upsert: true } //upsert is used to insert a new document if no document matches the query then 
)

//$set is used to sets a value of a field
//$rename is used to rename a field
//$unset is used to remove a field

db.Students_Data.updateOne(
    { StuName: {$eq:"Siddhi"} }, 
    { $rename: { StuSGPA: "StuCGPA" } } //This will rename the StuSGPA field to StuCGPA in the document where StuName is "Lakshya"
)

db.Students_Data.updateOne({
    StuName: {$eq:"Siddhi"}},
    {$set: { StuStream: "CSE", StuAge:15, StuGender:'Female' } 
})

db.Students_Data.updateOne({
    StuName: {$eq:"Siddhi"}},
    {$set: { StuStream: "CSE", StuAge:1, StuGender:'Java' }},
    {$rename:{StuGender:"StuLang"}
})

db.Students_Data.deleteOne({
    StuName: {$eq:"Siddhi"}})

db.Students_Data.updateMany({StuName:{$in:['Amit','Lakshya']}},
    {$set:{'aboutUs':"This is a test document for updateMany operation."}}
)

db.Students_Data.find({aboutUs:{$eq:"This is a test document for updateMany operation."}})

db.Students_Data.find({aboutUs:/document/})

db.Students_Data.find({StuName:/mit/})//case sensitive search

db.Students_Data.find({StuName:/Mit/})//case insensitive search

db.Students_Data.find({StuName:/mit/i})// case insensitive search

db.Students_Data.find({StuName:/^A/i})//for first letter of name

db.Students_Data.find({StuName:/ya$/i})//for last letter of name

db.Students_Data.find({StuName:/^s$/i})

db.Students_Data.find({StuName:/.{1}a$/i})//for second character of name

db.Students_Data.find({StuName:/.{2}a$/i})//for third character of name

db.Students_Data.find({StuName:/a.{1}a$/i})//for 2nd last character of name

//Mongodb array find operations 
//There are many array find operations in MongoDB that can be used to query documents that contain arrays.

db.Students_Data.updateOne({StuName:"Amit"},{$push:{StuLang:"C++"}})
//push is used to add a new element to an array field in a document.

db.Students_Data.updateOne({StuName:"Amit"},{$addToSet:{StuLang:"C++"}})
//$addToSet is used for not adding a duplicate element to an array field in a document.

// To show  All Databases
//Show databases
//show dbs
//we make new database that is non-existence//
// use Allenhouse25_DB
//To create new collections //
//db.createCollection("Students_Data")
//output is { ok: 1 }
//db refers in mongodb is a built-in global object in the mongo shell and db refers to currently selected database.

//Insert new document
db.Students_Data.insertone({
    StuName:"Pragati",
    StuAge:20,
    StuEmail:'pragatigupta168@gmail.com',
    StuSGPA:8.5
})

//select data from collection
db.Students_Data.find()

//To Insert more than one document(we use array)
db.Students_Data.insertMany([
    {
        StuName:"Sachin",
        StuAge:21,
        StuEmail:'sachin198@gmail.com',
        StuSGPA:8.1,
        StuStream:"AI/ML",
        StuGender:"Male",
        StuLang:["C","C++","Java"]
    }
    ,
    {
        StuName:"Amit",
        StuAge:22,
        StuEmail:'singhamit188@gmail.com',
        StuSGPA:9.1,
        StuStream:"AI/ML",
        StuGender:"Male",
        StuLang:["C","Python","Java"]
    }
    ,
    {
        StuName:"Lakshya",
        StuAge:20,
        StuEmail:'lakshya122@gmail.com',
        StuSGPA:8.7,
        StuStream:"AI/ML",
        StuGender:"Male",
        StuLang:["C"],
        StuLocAdd:{
            HouseNo:302,
            City:"Kanpur",
            PinCode:208011
        }
    }
])

//Get total no of document
//db.Students_Data.find().count()

//projection specifies the field to return in the documents that match the selection criteria
//To return all fields in matching documents,remove this parameter.It is of the document .

db.Students_Data.find({},{StuName: 1, StuEmail: 1})

db.Students_Data.find({},{StuName: 1, StuLocAdd: 1})//here 1 means inclusion mtlb include karo

db.Students_Data.find({},{StuAge:0, StuLocADD:0})//here 0 means exclusion mtlb exclude karo

db.Students_Data.find({},{StuName:2, StuEmail:3})

//db.Students_Data.find({},{StuName: 1, StuEmail: 1, StuAge:0})
//MongoServerError[Location31254]: Cannot do exclusion on field StuAge in inclusion projection because StuAge is meaningless.

db.Students_Data.find({},{StuName: 1, StuEmail: 1, _id:0})
//_id:0 apne aap mei object id hai which serves as the primary key for the document in MongoDB.
//How id is generated in MongoDB?   
//The _id field is a unique identifier for each document in a MongoDB collection.
//It is 12-byte unique identifier that is automatically generated by MongoDB when a document is inserted into a collection.
//4 bytes for timestamp, 5 bytes for a random value, and 3 bytes for an incrementing counter.
//5 bytes for a random value, and 3 bytes for an incrementing counter.
//3 bytes for an incrementing counter.

db.Students_Data.find({},{StuLocAdd:1})

db.Students_Data.find({},{StuLocAdd:1})

db.Students_Data.find({},{'StuLocAdd.HouseNo':1, 'StuLocAdd.City':1})

//Day 2
//To insert a document with an array field
//We can insert a document with an array field in MongoDB, which allows us to store multiple values in a single field.
//For example, we can insert a document with a field called "hobbies" that contains an array of strings representing the hobbies of a person.

db.Children_Data.insertOne({
    _id: 1,
    name: "Pragati",
    hobbies: ["Reading", "Traveling"],
    scores:[78, 85, 90],
    items: [
        { item: "Book", price: 10 },
        { item: "Pen", price: 2 }
    ],      
})

//Selection
db.Students_Data.find({
    StuName:{ $eq: "Amit" // $eq is used to match the value of StuName with "Amit"
        }
})

db.Students_Data.find({
    StuSGPA:{ $gte: 8.5 }// $gte is used to match the value of StuSGPA that is greater than 8.5
})

db.Students_Data.find({
    StuLang: { $in: ["C", "Python"] } // $in is used to match the value of StuLang that is in the array ["C", "Python"]
})

db.Students_Data.find({
    StuAge: { $ne: 20 } // $ne is used to match the value of StuAge that is not equal to 20
})

db.Students_Data.find({
    StuLocAdd: { $lt: true } // $lt is used to match the value of StuLocAdd that is less than true
})

//There are many operators in MongoDB that can be used to compare  and refernce document fields.
//Comparison: The following operators can be used in queries to compare values in documents:
//$eq: Matches values that are equal to a specified value.
//$ne: Matches values that are not equal to a specified value.  
//$gt: Matches values that are greater than a specified value.
//$gte: Matches values that are greater than or equal to a specified value.
//$lt: Matches values that are less than a specified value.
//$lte: Matches values that are less than or equal to a specified value.
//$in: Matches values that are in a specified array.

//Logical Operators: The following operators can be used to combine multiple conditions in a query:
//$and:Returns document where both queries match.
//$or:Returns documents where either query matches.
//$not: Returns documents where the query does not match.

//$exists: Returns documents where a specified field exists or does not exist.
//$type: Returns documents where a specified field is of a specified type.

db.Students_Data.find({
    $and: [
        { StuAge: { $eq: 20 } }, 
        { StuSGPA: { $gte: 9.0 } }
    ]       
})

db.Students_Data.find({
    $and: [
        { StuName: { $eq: "Amit" } }, 
        { StuSGPA: { $gte: 7.0 } }
    ]       
})

db.Students_Data.find({
    $or: [
        { StuName: { $eq: "Amit" } }, 
        { StuSGPA: { $gte: 9.0 } }
    ]       
})

db.Students_Data.find({
    $and: [
        { StuName: { $eq: "Amit" } }, 
        { StuSGPA:{$not: { $gte: 7.0 }} }
    ]       
})

db.Students_Data.find({
    StuLocAdd: { $exists: true }
})

db.Students_Data.find({
    StuGender: { $type: "string" } 
})

db.Students_Data.find({
    StuGender: { $type: 2 } 
})

db.Students_Data.find({
    StuName: { $exists: true },
    StuName: { $type: "string" },
    StuName: { $gte: "A" } 
})
//There are my operator of $type in MongoDB that can be used to check the type of a field in a document.
//For example, we can use $type to check if a field is of type string=2, double=1, int=16, long=18, 
//decimal=19, array=4, object=3, boolean=8, date=9, null=10, regex=11, and binary data=5.

db.Students_Data.find({
    StuName: { $exists: true, $type: "string", $gte: "A" }
})

db.Students_Data.find({
    $and:[{StuAge:{$exists:true}}, {StuName:{$type:"string"}}, {StuName:{$eq:"Amit"}}]
})

//It is implicit-and that can be used to combine multiple conditions in a query.

//Now we will learn about the Date object in MongoDB.
db.DatesDemo.insertMany([
    {
        _id: 1001,
        info:'Date by using Date()',
        DOJ:Date()
    }
])

db.DatesDemo.insertMany([
    {
        _id: 1002,
        info:'Date by using new Date()',
        DOJ: new Date()
    }
])

db.DatesDemo.insertMany([
    {
        _id: 1003,
        info:'Date by using ISODate()',
        DOJ: ISODate()
    }
])

db.DatesDemo.find({
    DOJ:{$type:"date"}
})


//Mongodb create a new Date object in two ways:
//1. By using the new Date() constructor, which returns a date and time as date object.
//2. By using the ISODate() function, which returns a date and time as date object.
//3. By using the Date() function, which returns a date and time as String object.
//By using UTC(coordinated universal time) time, which is the standard time used in MongoDB.
//If Z is added at the end of the date string, it indicates that the date is in UTC time.
//If Z is not added at the end of the date string, it indicates that the date is in local time.


db.DatesDemo.insertMany([
    {
        _id: 1004,
        info:'Date by using new Date()',
        DOB:  new Date('2005-01-01')
    }
])

//$dateToString is used to convert a date to a string according to a user-specified format.
//{$dateToString: { 
// date:<date expression>,
// format:<format expression>,
// timezone:<tz expression>,}}

//Error Allenhouse25_A_DB.DatesDemo :: caused by :: can't convert from BSON type string to Date.

db.DatesDemo.find({DOJ:{$type:'date'}},{
    Date_of_Joining: {
        $dateToString: {
            date: "$DOJ",
            format: "%Y-%m-%d %H:%M:%S",
            timezone: "Asia/Kolkata"
        } 
}
})

db.Students_Data.updateOne(
    { StuName: {$eq:"Lakshya"} }, 
    { $set: { StuSGPA: 8.0 } }
)


db.Students_Data.updateOne(
    { StuName: {$eq:"Lakshya"} }, 
    { $set: { StuSGPA: 8.0, StuStream:'EC' } }
)

db.Students_Data.updateOne(
    {StuName:{$in:['Lakshya','Amit','Pragati','Sachin']}},
    { $set: { StuSGPA: 8.0, StuStream:'EC' }
}
)

db.Students_Data.updateOne(
    {StuName:{$in:['Lakshya','Amit','Pragati','Sachin']}},
    { $set: { StuSGPA: 8.0, StuStream:'EC' }
},{ upsert: true } //upsert is used to insert a new document if no document matches the query then 
)

//$set is used to sets a value of a field
//$rename is used to rename a field
//$unset is used to remove a field

db.Students_Data.updateOne(
    { StuName: {$eq:"Siddhi"} }, 
    { $rename: { StuSGPA: "StuCGPA" } } //This will rename the StuSGPA field to StuCGPA in the document where StuName is "Lakshya"
)

db.Students_Data.updateOne({
    StuName: {$eq:"Siddhi"}},
    {$set: { StuStream: "CSE", StuAge:15, StuGender:'Female' } 
})

db.Students_Data.updateOne({
    StuName: {$eq:"Siddhi"}},
    {$set: { StuStream: "CSE", StuAge:1, StuGender:'Java' }},
    {$rename:{StuGender:"StuLang"}
})

db.Students_Data.deleteOne({
    StuName: {$eq:"Siddhi"}})

db.Students_Data.updateMany({StuName:{$in:['Amit','Lakshya']}},
    {$set:{'aboutUs':"This is a test document for updateMany operation."}}
)

db.Students_Data.find({aboutUs:{$eq:"This is a test document for updateMany operation."}})

db.Students_Data.find({aboutUs:/document/})

db.Students_Data.find({StuName:/mit/})//case sensitive search

db.Students_Data.find({StuName:/Mit/})//case insensitive search

db.Students_Data.find({StuName:/mit/i})// case insensitive search

db.Students_Data.find({StuName:/^A/i})//for first letter of name

db.Students_Data.find({StuName:/ya$/i})//for last letter of name

db.Students_Data.find({StuName:/^s$/i})

db.Students_Data.find({StuName:/.{1}a$/i})//for second character of name

db.Students_Data.find({StuName:/.{2}a$/i})//for third character of name

db.Students_Data.find({StuName:/a.{1}a$/i})//for 2nd last character of name

//Mongodb array find operations 
//There are many array find operations in MongoDB that can be used to query documents that contain arrays.

db.Students_Data.updateOne({StuName:"Amit"},{$push:{StuLang:"C++"}})
//push is used to add a new element to an array field in a document.

db.Students_Data.updateOne({StuName:"Amit"},{$addToSet:{StuLang:"C++"}})
//$addToSet is used for not adding a duplicate element to an array field in a document.

// To show  All Databases
//Show databases
//show dbs
//we make new database that is non-existence//
// use Allenhouse25_DB
//To create new collections //
//db.createCollection("Students_Data")
//output is { ok: 1 }
//db refers in mongodb is a built-in global object in the mongo shell and db refers to currently selected database.

//Insert new document
db.Students_Data.insertone({
    StuName:"Pragati",
    StuAge:20,
    StuEmail:'pragatigupta168@gmail.com',
    StuSGPA:8.5
})

//select data from collection
db.Students_Data.find()

//To Insert more than one document(we use array)
db.Students_Data.insertMany([
    {
        StuName:"Sachin",
        StuAge:21,
        StuEmail:'sachin198@gmail.com',
        StuSGPA:8.1,
        StuStream:"AI/ML",
        StuGender:"Male",
        StuLang:["C","C++","Java"]
    }
    ,
    {
        StuName:"Amit",
        StuAge:22,
        StuEmail:'singhamit188@gmail.com',
        StuSGPA:9.1,
        StuStream:"AI/ML",
        StuGender:"Male",
        StuLang:["C","Python","Java"]
    }
    ,
    {
        StuName:"Lakshya",
        StuAge:20,
        StuEmail:'lakshya122@gmail.com',
        StuSGPA:8.7,
        StuStream:"AI/ML",
        StuGender:"Male",
        StuLang:["C"],
        StuLocAdd:{
            HouseNo:302,
            City:"Kanpur",
            PinCode:208011
        }
    }
])

//Get total no of document
//db.Students_Data.find().count()

//projection specifies the field to return in the documents that match the selection criteria
//To return all fields in matching documents,remove this parameter.It is of the document .

db.Students_Data.find({},{StuName: 1, StuEmail: 1})

db.Students_Data.find({},{StuName: 1, StuLocAdd: 1})//here 1 means inclusion mtlb include karo

db.Students_Data.find({},{StuAge:0, StuLocADD:0})//here 0 means exclusion mtlb exclude karo

db.Students_Data.find({},{StuName:2, StuEmail:3})

//db.Students_Data.find({},{StuName: 1, StuEmail: 1, StuAge:0})
//MongoServerError[Location31254]: Cannot do exclusion on field StuAge in inclusion projection because StuAge is meaningless.

db.Students_Data.find({},{StuName: 1, StuEmail: 1, _id:0})
//_id:0 apne aap mei object id hai which serves as the primary key for the document in MongoDB.
//How id is generated in MongoDB?   
//The _id field is a unique identifier for each document in a MongoDB collection.
//It is 12-byte unique identifier that is automatically generated by MongoDB when a document is inserted into a collection.
//4 bytes for timestamp, 5 bytes for a random value, and 3 bytes for an incrementing counter.
//5 bytes for a random value, and 3 bytes for an incrementing counter.
//3 bytes for an incrementing counter.

db.Students_Data.find({},{StuLocAdd:1})

db.Students_Data.find({},{StuLocAdd:1})

db.Students_Data.find({},{'StuLocAdd.HouseNo':1, 'StuLocAdd.City':1})

//Day 2
//To insert a document with an array field
//We can insert a document with an array field in MongoDB, which allows us to store multiple values in a single field.
//For example, we can insert a document with a field called "hobbies" that contains an array of strings representing the hobbies of a person.

db.Children_Data.insertOne({
    _id: 1,
    name: "Pragati",
    hobbies: ["Reading", "Traveling"],
    scores:[78, 85, 90],
    items: [
        { item: "Book", price: 10 },
        { item: "Pen", price: 2 }
    ],      
})

//Selection
db.Students_Data.find({
    StuName:{ $eq: "Amit" // $eq is used to match the value of StuName with "Amit"
        }
})

db.Students_Data.find({
    StuSGPA:{ $gte: 8.5 }// $gte is used to match the value of StuSGPA that is greater than 8.5
})

db.Students_Data.find({
    StuLang: { $in: ["C", "Python"] } // $in is used to match the value of StuLang that is in the array ["C", "Python"]
})

db.Students_Data.find({
    StuAge: { $ne: 20 } // $ne is used to match the value of StuAge that is not equal to 20
})

db.Students_Data.find({
    StuLocAdd: { $lt: true } // $lt is used to match the value of StuLocAdd that is less than true
})

//There are many operators in MongoDB that can be used to compare  and refernce document fields.
//Comparison: The following operators can be used in queries to compare values in documents:
//$eq: Matches values that are equal to a specified value.
//$ne: Matches values that are not equal to a specified value.  
//$gt: Matches values that are greater than a specified value.
//$gte: Matches values that are greater than or equal to a specified value.
//$lt: Matches values that are less than a specified value.
//$lte: Matches values that are less than or equal to a specified value.
//$in: Matches values that are in a specified array.

//Logical Operators: The following operators can be used to combine multiple conditions in a query:
//$and:Returns document where both queries match.
//$or:Returns documents where either query matches.
//$not: Returns documents where the query does not match.

//$exists: Returns documents where a specified field exists or does not exist.
//$type: Returns documents where a specified field is of a specified type.

db.Students_Data.find({
    $and: [
        { StuAge: { $eq: 20 } }, 
        { StuSGPA: { $gte: 9.0 } }
    ]       
})

db.Students_Data.find({
    $and: [
        { StuName: { $eq: "Amit" } }, 
        { StuSGPA: { $gte: 7.0 } }
    ]       
})

db.Students_Data.find({
    $or: [
        { StuName: { $eq: "Amit" } }, 
        { StuSGPA: { $gte: 9.0 } }
    ]       
})

db.Students_Data.find({
    $and: [
        { StuName: { $eq: "Amit" } }, 
        { StuSGPA:{$not: { $gte: 7.0 }} }
    ]       
})

db.Students_Data.find({
    StuLocAdd: { $exists: true }
})

db.Students_Data.find({
    StuGender: { $type: "string" } 
})

db.Students_Data.find({
    StuGender: { $type: 2 } 
})

db.Students_Data.find({
    StuName: { $exists: true },
    StuName: { $type: "string" },
    StuName: { $gte: "A" } 
})
//There are my operator of $type in MongoDB that can be used to check the type of a field in a document.
//For example, we can use $type to check if a field is of type string=2, double=1, int=16, long=18, 
//decimal=19, array=4, object=3, boolean=8, date=9, null=10, regex=11, and binary data=5.

db.Students_Data.find({
    StuName: { $exists: true, $type: "string", $gte: "A" }
})

db.Students_Data.find({
    $and:[{StuAge:{$exists:true}}, {StuName:{$type:"string"}}, {StuName:{$eq:"Amit"}}]
})

//It is implicit-and that can be used to combine multiple conditions in a query.

//Now we will learn about the Date object in MongoDB.
db.DatesDemo.insertMany([
    {
        _id: 1001,
        info:'Date by using Date()',
        DOJ:Date()
    }
])

db.DatesDemo.insertMany([
    {
        _id: 1002,
        info:'Date by using new Date()',
        DOJ: new Date()
    }
])

db.DatesDemo.insertMany([
    {
        _id: 1003,
        info:'Date by using ISODate()',
        DOJ: ISODate()
    }
])

db.DatesDemo.find({
    DOJ:{$type:"date"}
})


//Mongodb create a new Date object in two ways:
//1. By using the new Date() constructor, which returns a date and time as date object.
//2. By using the ISODate() function, which returns a date and time as date object.
//3. By using the Date() function, which returns a date and time as String object.
//By using UTC(coordinated universal time) time, which is the standard time used in MongoDB.
//If Z is added at the end of the date string, it indicates that the date is in UTC time.
//If Z is not added at the end of the date string, it indicates that the date is in local time.


db.DatesDemo.insertMany([
    {
        _id: 1004,
        info:'Date by using new Date()',
        DOB:  new Date('2005-01-01')
    }
])

//$dateToString is used to convert a date to a string according to a user-specified format.
//{$dateToString: { 
// date:<date expression>,
// format:<format expression>,
// timezone:<tz expression>,}}

//Error Allenhouse25_A_DB.DatesDemo :: caused by :: can't convert from BSON type string to Date.

db.DatesDemo.find({DOJ:{$type:'date'}},{
    Date_of_Joining: {
        $dateToString: {
            date: "$DOJ",
            format: "%Y-%m-%d %H:%M:%S",
            timezone: "Asia/Kolkata"
        } 
}
})

db.Students_Data.updateOne(
    { StuName: {$eq:"Lakshya"} }, 
    { $set: { StuSGPA: 8.0 } }
)


db.Students_Data.updateOne(
    { StuName: {$eq:"Lakshya"} }, 
    { $set: { StuSGPA: 8.0, StuStream:'EC' } }
)

db.Students_Data.updateOne(
    {StuName:{$in:['Lakshya','Amit','Pragati','Sachin']}},
    { $set: { StuSGPA: 8.0, StuStream:'EC' }
}
)

db.Students_Data.updateOne(
    {StuName:{$in:['Lakshya','Amit','Pragati','Sachin']}},
    { $set: { StuSGPA: 8.0, StuStream:'EC' }
},{ upsert: true } //upsert is used to insert a new document if no document matches the query then 
)

//$set is used to sets a value of a field
//$rename is used to rename a field
//$unset is used to remove a field

db.Students_Data.updateOne(
    { StuName: {$eq:"Siddhi"} }, 
    { $rename: { StuSGPA: "StuCGPA" } } //This will rename the StuSGPA field to StuCGPA in the document where StuName is "Lakshya"
)

db.Students_Data.updateOne({
    StuName: {$eq:"Siddhi"}},
    {$set: { StuStream: "CSE", StuAge:15, StuGender:'Female' } 
})

db.Students_Data.updateOne({
    StuName: {$eq:"Siddhi"}},
    {$set: { StuStream: "CSE", StuAge:1, StuGender:'Java' }},
    {$rename:{StuGender:"StuLang"}
})

db.Students_Data.deleteOne({
    StuName: {$eq:"Siddhi"}})

db.Students_Data.updateMany({StuName:{$in:['Amit','Lakshya']}},
    {$set:{'aboutUs':"This is a test document for updateMany operation."}}
)

db.Students_Data.find({aboutUs:{$eq:"This is a test document for updateMany operation."}})

db.Students_Data.find({aboutUs:/document/})

db.Students_Data.find({StuName:/mit/})//case sensitive search

db.Students_Data.find({StuName:/Mit/})//case insensitive search

db.Students_Data.find({StuName:/mit/i})// case insensitive search

db.Students_Data.find({StuName:/^A/i})//for first letter of name

db.Students_Data.find({StuName:/ya$/i})//for last letter of name

db.Students_Data.find({StuName:/^s$/i})

db.Students_Data.find({StuName:/.{1}a$/i})//for second character of name

db.Students_Data.find({StuName:/.{2}a$/i})//for third character of name

db.Students_Data.find({StuName:/a.{1}a$/i})//for 2nd last character of name

//Mongodb array find operations 
//There are many array find operations in MongoDB that can be used to query documents that contain arrays.

db.Students_Data.updateOne({StuName:"Amit"},{$push:{StuLang:"C++"}})
//push is used to add a new element to an array field in a document.

db.Students_Data.updateOne({StuName:"Amit"},{$addToSet:{StuLang:"C++"}})
//$addToSet is used for not adding a duplicate element to an array field in a document.

db.Students_Data.updateOne({StuName:"Amit"},{$pull:{StuLang:"C++"}})
//$pull is used to remove an element from an array field in a document.

db.Students_Data.find({StuLang:"C"})
//To find all documents where StuLang is "C"
db.Students_Data.find({StuLang:"Java"})
//To find all documents where StuLang is "Java"

db.Students_Data.find({hobbies:{$all:["Reading","Traveling"]}})
//$all is used to match all elements in an array field in a document.

db.Students_Data.find({StuSGPA:{$elemMatch:{$eq:90}}})
//elemMatch is used to match an element in an array field in a document.

//i want to update the stulang field C++ in the place of C plus plus 
db.Students_Data.updateOne({StuName:"Amit", StuLang:"Java"},
    {$set:{'StuLang.$':"C plus plus"}})
//.$ is used to update the first element that matches the query condition.

//Mongodb Limit()Method
//The limit() method is used to limit the number of documents returned by a query.
db.Students_Data.find().limit(2)

//Mogodb Skip()Method
//The skip() method is used to skip a specified number of documents in a query.
db.Students_Data.find().skip(2)

//Mongodb Sort()Method
//The sort() method is used to sort the documents returned by a query in ascending or descending
//order based on a specified field.
db.Students_Data.find().sort({StuAge:1}) //1 for ascending order
db.Students_Data.find().sort({StuAge:-1}) //-1 for descending order

db.Students_Data.find().sort({StuAge:1, StuName:1})
//By using two fields so it can sort by both name and age in ascending order.

//i have to return third highest sgpa student
db.Students_Data.find().sort({StuSGPA:-1}).skip(2).limit(1)
//This will sort the documents in descending order by StuSGPA, 
//skip the first two documents, and return the next document.

//Mongodb Aggregation Pipeline
//The aggregation pipeline is a powerful framework for performing data transformations and analysis in MongoDB.
//Aggregation operations allow you to group, sort, perform calculations, analyze data and much more in various ways.
//Aggregation pipelines can have one or more stages. The order of these stages are important.
//Each stage acts upon the results of the previous page.
//It consists od=f multiple stages are as follows:
//1. $match: Filters the documents to pass only those that match the specified condition(s) to the next stage.
//2. $group: Groups the documents by a specified field and performs aggregation operations on the grouped data.
//3. $project: Reshapes the documents by including, excluding, or renaming fields.

db.Students_Data.aggregate([
    { $match: { StuAge: { $gte: 20 } } },
    { $group: { _id: "$StuStream", averageSGPA: { $avg: "$StuSGPA" } } },
    { $sort: { averageSGPA: -1 } }              
])

//For New Dataset employees
db.employees.aggregate([
    {$project: {firstName:1,lastName:1,}
    },
])


db.employees.aggregate([        
    {$match:{gender:'female'}}])

db.employees.aggregate([
    {$project: {firstName:1,lastName:1,gender:1}
    },
    {$match:{gender:'female'}}])


db.employees.aggregate([        
    {$match:{gender:'female'}}])


db.employees.aggregate([
    {$project: {firstName:1,lastName:1,gender:1, salary:1}},
    {$match:{salary:{$gt:5000}}}
])

db.employees.aggregate([
    {$group:{_id:"$gender"}}
])//for gender


db.employees.aggregate([
    {$group:{_id:"$department.name"}}
])//for department name


db.employees.aggregate([
    {$group:{_id:"$department"}}
])//for department name

db.employees.aggregate([
    {$group:{_id:"$department.name", totalSalary:{$sum:"$salary"}}}
])//for total salary in each department

db.employees.aggregate([
    {$group:{_id:"$department.name", totalSalary:{$sum:"$salary"},
    totalEmployees:{$sum:1}}}               
])//for total salary and total employees in each department

db.employees.aggregate([
    {$group:{_id:"$department.name", totalSalary:{$avg:"$salary"},
    totalEmployees:{$sum:1}}}               
])//for average salary and total employees in each department

db.employees.aggregate([
    {$group:{_id:"$department.name", AverageSalary:{$avg:"$salary"},
    totalSalary:{$sum:"$salary"},
    totalEmployees:{$sum:1}}}               
])

db.employees.aggregate([
    {$group:{_id:"$department.name", AverageSalary:{$avg:"$salary"},
    totalSalary:{$sum:"$salary"},MaximumSalary:{$max:"$salary"},
    MinimumSalary:{$min:"$salary"},
    totalEmployees:{$sum:1}}}               
])//for average salary, total salary, maximum salary, minimum salary and total employees in each department

//Mongodb $sort
db.employees.aggregate([
    {$group:{_id:"$department.name",  totalEmployees:{$sum:1}, AverageSalary:{$avg:"$salary"},
    totalSalary:{$sum:"$salary"},MaximumSalary:{$max:"$salary"},
    MinimumSalary:{$min:"$salary"}}},               
    {$sort:{AverageSalary:-1}}//for sorting by average salary in descending order
])

db.employees.aggregate([
    {$group:{_id:"$department.name",  totalEmployees:{$sum:1        
    }, AverageSalary:{$avg:"$salary"},          
    totalSalary:{$sum:"$salary"},MaximumSalary:{$max:"$salary"},
    MinimumSalary:{$min:"$salary"}}},
    {$sort:{AverageSalary:-1,MaximumSalary:-1}}//for sorting by average salary and maximum salary in descending order
])

db.employess.aggregate([
    {$group:{_id:"$department.name",totalEmployees:{$sum:1},
    AverageSalary:{$avg:"$salary"},          
    totalSalary:{$sum:"$salary"},
    MaximumSalary:{$max:"$salary"},
    MinimumSalary:{$min:"$salary"}}},
    {$sort:{TotalSalary:1}},
{
    $limit:1// This will limit the result to only one document
}])  


db.employess.aggregate([
    {$group:{_id:"$department.name",
    totalEmployees:{$sum:1},
    totalsalary:{$sum:"$salary"},
    Averagesalary:{$avg:"$salary"},          
    Maximumsalary:{$max:"$salary"},
    Minimumsalary:{$min:"$salary"}}},
    {
        $sort:{Totalsalary:1}},
    {
    $limit:1
    },
    {
    $sample:{size:2}
    }
])

//Mongodb sortbycount

db.employees.aggregate([{$sortByCount:"$department.name"}])

//$unwind operator is used to deconstruct an array field from a document into multiple document where each document contains a single element from the array field.

db.employees.aggregate([
    {$unwind:"$department.name"},                        
])

db.Students_Data.aggregate([
    {$unwind:"$StuLang"}
])

db.Students_Data.aggregate([
    {$unwind:"$StuLang"},
    {$group:{_id:"$StuLang", totalStudents:{$sum:1}}}
])


//For Backup in c drive
//
//Mongorestore --version 

// C:\Users\praga>mongorestore --version (This command is used to check the version of mongorestore command line tool).
// mongorestore version: 100.12.2
// git version: f76a3ae4029780f61c49cbd39b7336f8d9c30ed0
// Go version: go1.23.8
//    os: windows
//    arch: amd64
//    compiler: gc

// C:\Users\praga>mongorestore --db BatchA C:\Allenhouse25_A_DB  (This command is used to restore a database from a BSON file).

// 2025-07-23T09:26:33.165+0530    The --db and --collection flags are deprecated for this use-case; please use --nsInclude instead, i.e. with --nsInclude=${DATABASE}.${COLLECTION}
// 2025-07-23T09:26:33.167+0530    building a list of collections to restore from C:\Allenhouse25_A_DB dir
// 2025-07-23T09:26:33.169+0530    don't know what to do with file "C:\Allenhouse25_A_DB\prelude.json", skipping...
// 2025-07-23T09:26:33.169+0530    reading metadata for BatchA.Customer_Data from C:\Allenhouse25_A_DB\Customer_Data.metadata.json
// 2025-07-23T09:26:33.170+0530    reading metadata for BatchA.DatesDemo from C:\Allenhouse25_A_DB\DatesDemo.metadata.json
// 2025-07-23T09:26:33.170+0530    reading metadata for BatchA.Students_Data from C:\Allenhouse25_A_DB\Students_Data.metadata.json
// 2025-07-23T09:26:33.170+0530    reading metadata for BatchA.employees from C:\Allenhouse25_A_DB\employees.metadata.json
// 2025-07-23T09:26:33.170+0530    reading metadata for BatchA.Children_Data from C:\Allenhouse25_A_DB\Children_Data.metadata.json
// 2025-07-23T09:26:33.194+0530    restoring BatchA.employees from C:\Allenhouse25_A_DB\employees.bson
// 2025-07-23T09:26:33.206+0530    finished restoring BatchA.employees (8 documents, 0 failures)
// 2025-07-23T09:26:33.229+0530    restoring BatchA.Students_Data from C:\Allenhouse25_A_DB\Students_Data.bson
// 2025-07-23T09:26:33.240+0530    finished restoring BatchA.Students_Data (4 documents, 0 failures)
// 2025-07-23T09:26:33.247+0530    restoring BatchA.DatesDemo from C:\Allenhouse25_A_DB\DatesDemo.bson
// 2025-07-23T09:26:33.254+0530    restoring BatchA.Children_Data from C:\Allenhouse25_A_DB\Children_Data.bson
// 2025-07-23T09:26:33.263+0530    restoring BatchA.Customer_Data from C:\Allenhouse25_A_DB\Customer_Data.bson
// 2025-07-23T09:26:33.265+0530    finished restoring BatchA.Children_Data (1 document, 0 failures)
// 2025-07-23T09:26:33.270+0530    finished restoring BatchA.DatesDemo (4 documents, 0 failures)
// 2025-07-23T09:26:33.283+0530    finished restoring BatchA.Customer_Data (1 document, 0 failures)
// 2025-07-23T09:26:33.283+0530    no indexes to restore for collection BatchA.Customer_Data
// 2025-07-23T09:26:33.283+0530    no indexes to restore for collection BatchA.Students_Data
// 2025-07-23T09:26:33.283+0530    no indexes to restore for collection BatchA.Children_Data
// 2025-07-23T09:26:33.284+0530    no indexes to restore for collection BatchA.DatesDemo
// 2025-07-23T09:26:33.284+0530    no indexes to restore for collection BatchA.employees
// 2025-07-23T09:26:33.284+0530    18 document(s) restored successfully. 0 document(s) failed to restore.

//mongorestore --db BatchA --collection DatesDemo C:\Allenhouse25_A_DB\DatesDemo.bson  (This command is used to restore a specific collection from a BSON file).

//mongoexport --db=Allenhouse25_A_DB --collections=Students_Data --out=d:\\Students_Data.csv --type=csv

//To import data from specified collection

//mongoimport --db=BatchA --collection=Students_Data --file=d:\\Students_Data.csv --type=json

/*1) In Binary Format(BSON)
    i) Backup :  mongodump
    ii) Restore : mongorestore

2) In JSON/CSV Format
    i) Backup: mongoexport
    ii) Restore: mongoimport */


    